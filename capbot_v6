# 메시지 많이 발송면 텔레그램 막히니까 다량 메시지를 보내야 하는 환경에서 3개까지는 그냥 보내고 4개째 부터는 1분 후에 모아서 발송.

import sys
import os
import time
import traceback
import requests
import json
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout, QLabel, QFileDialog,
    QMessageBox, QSlider, QHBoxLayout, QLineEdit, QGroupBox, QFormLayout
)
from PyQt5.QtCore import QTimer, Qt, pyqtSignal, QRect
from PyQt5.QtGui import QPainter, QPen
from PIL import Image, ImageChops
import asyncio
from telegram import Bot, InputMediaPhoto  # InputMediaPhoto 추가
from telegram.ext import ApplicationBuilder
from telegram.error import TelegramError
import aiohttp
import pyautogui
import socket
import datetime

class ScreenCaptureWidget(QWidget):
    capture_completed = pyqtSignal(tuple)

    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint)
        self.setStyleSheet("background-color:black;")
        self.setWindowOpacity(0.3)
        self.setGeometry(QApplication.primaryScreen().geometry())
        
        self.begin = None
        self.end = None
        self.show()

    def paintEvent(self, event):
        if self.begin and self.end:
            painter = QPainter(self)
            painter.setPen(QPen(Qt.red, 3, Qt.SolidLine))
            rect = QRect(self.begin, self.end)
            painter.drawRect(rect)

    def mousePressEvent(self, event):
        self.begin = event.pos()
        self.end = self.begin
        self.update()

    def mouseMoveEvent(self, event):
        self.end = event.pos()
        self.update()

    def mouseReleaseEvent(self, event):
        self.capture_completed.emit(self.getRect())
        self.close()

    def getRect(self):
        return (
            min(self.begin.x(), self.end.x()),
            min(self.begin.y(), self.end.y()),
            abs(self.end.x() - self.begin.x()),
            abs(self.end.y() - self.begin.y())
        )

class ScreenMonitor(QWidget):
    def __init__(self):
        super().__init__()
        self.config_file = 'screen_monitor_config.json'
        self.save_path = ""
        self.monitor_area = None
        self.pixel_threshold = 100
        self.last_image = None
        self.last_check_time = 0
        self.last_save_time = 0
        self.save_cooldown = 2
        self.monitoring = False
        self.bot = None
        self.application = None
        self.chat_id = None
        self.start_time = None
        self.loop = None
        self.monitoring_was_active = False
        self.default_bot_token = "your_default_bot_token"
        self.default_chat_id = "your_default_chat_id"
        self.load_config()
        self.initUI()
        self.show_guide()

        # 메시지 카운터 및 누적 리스트 초기화
        self.message_count = 0
        self.accumulated_screenshots = []
        self.accumulation_timer = QTimer(self)
        self.accumulation_timer.timeout.connect(self.send_accumulated_screenshots)

        if self.save_path and self.monitor_area and not self.monitoring:
            self.toggle_monitoring()

    def initUI(self):
        self.setWindowTitle('변화감지 캡처봇 v0.0030')
        self.setGeometry(100, 100, 400, 400)

        layout = QVBoxLayout()

        telegram_group = QGroupBox("Telegram 설정")
        telegram_layout = QFormLayout()

        self.bot_token_input = QLineEdit(self)
        self.bot_token_input.setEchoMode(QLineEdit.Password)
        self.bot_token_input.setPlaceholderText("봇 토큰을 입력하세요")
        telegram_layout.addRow(QLabel("봇 토큰:"), self.bot_token_input)

        self.chat_id_input = QLineEdit(self)
        self.chat_id_input.setPlaceholderText("챗 ID를 입력하세요")
        telegram_layout.addRow(QLabel("챗 ID:"), self.chat_id_input)

        self.save_telegram_btn = QPushButton('저장', self)
        self.save_telegram_btn.clicked.connect(self.save_telegram_settings)
        telegram_layout.addRow(self.save_telegram_btn)

        self.delete_telegram_btn = QPushButton('삭제', self)
        self.delete_telegram_btn.clicked.connect(self.delete_telegram_settings)
        telegram_layout.addRow(self.delete_telegram_btn)

        telegram_group.setLayout(telegram_layout)
        layout.addWidget(telegram_group)

        self.path_label = QLabel('저장 경로: 선택되지 않음', self)
        layout.addWidget(self.path_label)

        self.area_label = QLabel('감지 영역: 선택되지 않음', self)
        layout.addWidget(self.area_label)

        threshold_layout = QHBoxLayout()
        threshold_layout.addWidget(QLabel('픽셀 변화량 임계값:'))
        self.threshold_slider = QSlider(Qt.Horizontal)
        self.threshold_slider.setMinimum(100)
        self.threshold_slider.setMaximum(1000)
        self.threshold_slider.setTickInterval(100)
        self.threshold_slider.setValue(self.pixel_threshold)
        self.threshold_slider.setTickPosition(QSlider.TicksBelow)
        self.threshold_slider.valueChanged.connect(self.update_threshold)
        threshold_layout.addWidget(self.threshold_slider)
        self.threshold_label = QLabel(str(self.pixel_threshold))
        threshold_layout.addWidget(self.threshold_label)
        layout.addLayout(threshold_layout)

        self.select_path_btn = QPushButton('저장 경로 선택', self)
        self.select_path_btn.clicked.connect(self.select_save_path)
        layout.addWidget(self.select_path_btn)

        self.select_area_btn = QPushButton('감지 영역 선택', self)
        self.select_area_btn.clicked.connect(self.select_area)
        layout.addWidget(self.select_area_btn)

        self.start_stop_btn = QPushButton('모니터링 시작', self)
        self.start_stop_btn.clicked.connect(self.toggle_monitoring)
        layout.addWidget(self.start_stop_btn)

        self.status_label = QLabel('대기 중...', self)
        layout.addWidget(self.status_label)

        made_by_label = QLabel('Made by 충', self)
        made_by_label.setAlignment(Qt.AlignRight | Qt.AlignBottom)
        layout.addWidget(made_by_label)

        self.setLayout(layout)

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.check_screen)

        self.telegram_timer = QTimer(self)
        self.telegram_timer.timeout.connect(self.send_telegram_status)
        self.telegram_timer.start(3600000)

        self.update_ui_from_config()

    def load_config(self):
        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            self.save_path = config.get('save_path', '')
            self.monitor_area = tuple(config.get('monitor_area', (0, 0, 0, 0)))
            self.pixel_threshold = config.get('pixel_threshold', 100)
            self.bot_token = config.get('bot_token', self.default_bot_token)
            self.chat_id = config.get('chat_id', self.default_chat_id)
            self.monitoring_was_active = config.get('monitoring_was_active', False)
        except FileNotFoundError:
            self.bot_token = self.default_bot_token
            self.chat_id = self.default_chat_id

    def save_config(self):
        config = {
            'save_path': self.save_path,
            'monitor_area': self.monitor_area,
            'pixel_threshold': self.pixel_threshold,
            'bot_token': self.bot_token,
            'chat_id': self.chat_id,
            'monitoring_was_active': self.monitoring
        }
        with open(self.config_file, 'w') as f:
            json.dump(config, f)

    def update_ui_from_config(self):
        self.path_label.setText(f'저장 경로: {self.save_path or "선택되지 않음"}')
        self.area_label.setText(f'감지 영역: {self.monitor_area or "선택되지 않음"}')
        self.threshold_slider.setValue(self.pixel_threshold)
        self.threshold_label.setText(str(self.pixel_threshold))
        self.bot_token_input.setText(self.bot_token)
        self.chat_id_input.setText(str(self.chat_id) if self.chat_id else '')
        self.check_start_conditions()

    def show_guide(self):
        guide_text = (
            "사용법 안내\n\n"
            "1. Telegram 설정에서 봇 토큰과 챗 ID를 입력하고 저장하세요.\n"
            "2. 스크린샷이 저장될 폴더를 지정하세요.\n"
            "3. 변화를 감지할 영역을 드래그 하세요.\n"
            "4. 픽셀 변화량 임계값을 설정하세요.\n"
            "5. 모니터링 시작 버튼을 누르면 동작합니다.\n"
        )
        self.auto_close_message_box("사용법 안내", guide_text, 3000)

    def auto_close_message_box(self, title, message, timeout=3000):
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.setStandardButtons(QMessageBox.Ok)
        QTimer.singleShot(timeout, msg_box.close)
        msg_box.exec_()

    def select_save_path(self):
        self.save_path = QFileDialog.getExistingDirectory(self, '저장 경로 선택')
        if self.save_path:
            self.path_label.setText(f'저장 경로: {self.save_path}')
            self.check_start_conditions()
            self.save_config()

    def select_area(self):
        try:
            self.hide()
            self.capture_widget = ScreenCaptureWidget()
            self.capture_widget.capture_completed.connect(self.onCaptureFinished)
        except Exception as e:
            self.show()
            self.showErrorMessage("영역 선택 오류", f"영역 선택 중 오류가 발생했습니다: {str(e)}")

    def onCaptureFinished(self, rect):
        try:
            self.monitor_area = rect
            self.area_label.setText(f'감지 영역: {self.monitor_area}')
            self.show()
            self.check_start_conditions()
            self.save_config()
        except Exception as e:
            self.showErrorMessage("영역 선택 완료 오류", f"영역 선택 완료 처리 중 오류가 발생했습니다: {str(e)}")

    def update_threshold(self, value):
        self.pixel_threshold = value
        self.threshold_label.setText(str(value))
        self.save_config()

    def check_start_conditions(self):
        self.start_stop_btn.setEnabled(bool(self.save_path and self.monitor_area and self.bot_token and self.chat_id))

    async def setup_telegram(self):
        connection_pool_size = 20
        connect_timeout = 30.0
        read_timeout = 30.0

        conn = aiohttp.TCPConnector(limit=connection_pool_size)
        session = aiohttp.ClientSession(connector=conn, timeout=aiohttp.ClientTimeout(total=60, connect=connect_timeout, sock_read=read_timeout))
        
        self.application = ApplicationBuilder().token(self.bot_token).connect_timeout(connect_timeout).read_timeout(read_timeout).get_updates_http_version('1.1').build()
        self.bot = self.application.bot

    def toggle_monitoring(self):
        try:
            if not self.monitoring:
                if not self.bot_token or not self.chat_id:
                    self.showErrorMessage("Telegram 설정 오류", "Telegram 봇 토큰과 챗 ID를 먼저 설정하세요.")
                    return
                self.monitoring = True
                self.start_stop_btn.setText('모니터링 중지')
                self.timer.start(1000)
                self.status_label.setText('모니터링 중...')
                self.last_check_time = time.time()
                self.start_time = time.time()
                self.run_async_task(self.send_start_message())
            else:
                self.monitoring = False
                self.start_stop_btn.setText('모니터링 시작')
                self.timer.stop()
                self.status_label.setText('모니터링 중지됨')
                self.run_async_task(self.send_telegram_message("모니터링이 중지되었습니다."))
            self.save_config()
        except Exception as e:
            self.showErrorMessage("모니터링 토글 오류", f"모니터링 상태 변경 중 오류가 발생했습니다: {str(e)}")

    def check_screen(self):
        try:
            current_time = time.time()
            if current_time - self.last_check_time < 1:
                return

            self.last_check_time = current_time
            current_image = self.grab_screen(self.monitor_area)
            
            if current_image is not None and self.last_image is not None:
                diff = ImageChops.difference(current_image, self.last_image)
                bbox = diff.getbbox()
                if bbox:
                    diff_pixels = sum(diff.crop(bbox).convert("L").point(lambda p: p > 128).getdata())
                    if diff_pixels > self.pixel_threshold:
                        if current_time - self.last_save_time >= self.save_cooldown:
                            filepath = self.save_screenshot(current_image)
                            self.message_count += 1  # 메시지 카운트 증가
                            if self.message_count <= 3:
                                # 1~3회차는 즉시 전송
                                self.run_async_task(self.send_telegram_screenshot_alert(filepath))
                            else:
                                # 4회차부터는 누적
                                self.accumulated_screenshots.append(filepath)
                                if len(self.accumulated_screenshots) == 1:
                                    # 첫 누적 시 타이머 시작
                                    self.accumulation_timer.start(60000)  # 1분
                            self.last_save_time = current_time
            
            self.last_image = current_image
        except Exception as e:
            self.showErrorMessage("화면 체크 오류", f"화면 체크 중 오류가 발생했습니다: {str(e)}")
            self.monitoring = False
            self.toggle_monitoring()

    def grab_screen(self, bbox):
        try:
            left, top, width, height = bbox
            screenshot = pyautogui.screenshot(region=(left, top, width, height))
            return screenshot
        except Exception as e:  
            self.showErrorMessage("스크린샷 캡처 오류", f"스크린샷 캡처 중 오류가 발생했습니다: {str(e)}")
            return None

    def save_screenshot(self, image):
        try:
            pc_name = socket.gethostname()
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            sequence_number = 1
            while True:
                filename = f'{pc_name}_{timestamp}_{sequence_number}.png'
                filepath = os.path.join(self.save_path, filename)
                if not os.path.exists(filepath):
                    break
                sequence_number += 1
            image.save(filepath)
            self.status_label.setText(f'스크린샷 저장됨: {filepath}')
            return filepath
        except Exception as e:
            self.showErrorMessage("스크린샷 저장 오류", f"스크린샷 저장 중 오류가 발생했습니다: {str(e)}")
            return None

    def showErrorMessage(self, title, message):
        QMessageBox.critical(self, title, message)

    async def send_telegram_message(self, message):
        try:
            if not self.bot:
                await self.setup_telegram()
            await self.bot.send_message(chat_id=self.chat_id, text=message)
        except TelegramError as e:
            self.showErrorMessage("Telegram 오류", f"메시지 전송 중 오류가 발생했습니다: {str(e)}")
        except Exception as e:
            self.showErrorMessage("예상치 못한 오류", f"오류가 발생했습니다: {str(e)}")

    async def send_telegram_screenshot_alert(self, filepath):
        if filepath:
            message = f"화면 변화가 감지되어 스크린샷이 생성되었습니다.\n파일: {os.path.basename(filepath)}"
            try:
                await self._send_photo(filepath, caption=message)
            except Exception as e:
                self.showErrorMessage("예상치 못한 오류", f"오류가 발생했습니다: {str(e)}")

    async def _send_photo(self, filepath, caption=None):
        try:
            if not self.bot:
                await self.setup_telegram()
            retries = 3
            for attempt in range(retries):
                try:
                    with open(filepath, 'rb') as photo:
                        await self.bot.send_photo(chat_id=self.chat_id, photo=photo, caption=caption)
                    break  # 성공적으로 전송되면 루프 종료
                except (asyncio.TimeoutError, TelegramError) as e:
                    if attempt < retries - 1:
                        await asyncio.sleep(2 ** attempt)  # 지수 백오프
                    else:
                        raise
        except Exception as e:
            self.showErrorMessage("Telegram 오류", f"스크린샷 전송 중 오류가 발생했습니다: {str(e)}")

    async def send_start_message(self):
        ip_address = self.get_ip_address()
        message = f"화면 모니터링 프로그램이 시작되었습니다.\nIP 주소: {ip_address}"
        await self.send_telegram_message(message)

    def get_ip_address(self):
        try:
            response = requests.get('https://api.ipify.org', timeout=5)
            return response.text
        except Exception:
            return "IP 주소를 가져올 수 없습니다."

    def send_telegram_status(self):
        if self.monitoring and self.start_time:
            hours = int((time.time() - self.start_time) / 3600)
            self.run_async_task(self.send_telegram_message(f"{hours}시간째 정상 동작 중입니다."))

    def save_telegram_settings(self):
        bot_token = self.bot_token_input.text().strip()
        chat_id = self.chat_id_input.text().strip()

        if not bot_token or not chat_id:
            self.showErrorMessage("입력 오류", "봇 토큰과 챗 ID를 모두 입력해야 합니다.")
            return

        try:
            chat_id = int(chat_id)
        except ValueError:
            self.showErrorMessage("입력 오류", "챗 ID는 숫자여야 합니다.")
            return

        try:
            self.bot_token = bot_token
            self.chat_id = chat_id
            self.run_async_task(self.setup_telegram())
            self.run_async_task(self.send_telegram_message("Telegram 설정이 성공적으로 저장되었습니다."))
        except TelegramError as e:
            self.showErrorMessage("Telegram 오류", f"Telegram 설정이 유효하지 않습니다: {str(e)}")
            return
        except Exception as e:
            self.showErrorMessage("예상치 못한 오류", f"오류가 발생했습니다: {str(e)}")
            return

        self.save_config()
        self.check_start_conditions()
        QMessageBox.information(self, "성공", "Telegram 설정이 저장되었습니다.")

    def delete_telegram_settings(self):
        reply = QMessageBox.question(
            self, '삭제 확인',
            "Telegram 설정을 정말 삭제하시겠습니까?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self.bot_token = ''
            self.chat_id = None
            self.bot = None
            self.bot_token_input.clear()
            self.chat_id_input.clear()
            self.save_config()
            self.check_start_conditions()
            QMessageBox.information(self, "삭제 완료", "Telegram 설정이 삭제되었습니다.")

    def run_async_task(self, coro):
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.ensure_future(coro)
            else:
                loop.run_until_complete(coro)
        except RuntimeError:
            new_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(new_loop)
            new_loop.run_until_complete(coro)

    def closeEvent(self, event):
        if self.monitoring:
            self.toggle_monitoring()
        if self.loop and not self.loop.is_closed():
            self.loop.close()
        event.accept()

    def send_accumulated_screenshots(self):
        if self.accumulated_screenshots:
            message = f"{len(self.accumulated_screenshots)}개의 화면 변화가 감지되었습니다."
            self.run_async_task(self.send_telegram_multiple_screenshots(message, self.accumulated_screenshots))
            # 누적된 스크린샷 리스트 초기화
            self.accumulated_screenshots = []
        # 메시지 카운터 초기화
        self.message_count = 0
        # 누적 타이머 중지
        self.accumulation_timer.stop()

    async def send_telegram_multiple_screenshots(self, message, filepaths):
        try:
            if not self.bot:
                await self.setup_telegram()
            media = []
            files = []
            for filepath in filepaths[:10]:  # 최대 10개까지 전송
                photo = open(filepath, 'rb')
                files.append(photo)
                if len(media) == 0:
                    media.append(InputMediaPhoto(photo, caption=message))
                else:
                    media.append(InputMediaPhoto(photo))
            await self.bot.send_media_group(chat_id=self.chat_id, media=media)
            # 파일 객체 닫기
            for f in files:
                f.close()
        except Exception as e:
            self.showErrorMessage("Telegram 오류", f"다중 스크린샷 전송 중 오류가 발생했습니다: {str(e)}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    
    try:
        ex = ScreenMonitor()
        ex.show()
        sys.exit(app.exec_())
    except Exception as e:
        print(f"예상치 못한 오류가 발생했습니다: {str(e)}")
        print("상세 오류 정보:")
        print(traceback.format_exc())
        QMessageBox.critical(None, "치명적 오류", f"프로그램 실행 중 치명적인 오류가 발생했습니다:\n{str(e)}")
        sys.exit(1)
